# Main application server configuration

# HTTP to HTTPS redirect
server {
    listen 80;
    listen [::]:80;
    server_name _;
    
    # Security headers for HTTP requests
    add_header X-Frame-Options DENY always;
    add_header X-Content-Type-Options nosniff always;
    
    # Allow Let's Encrypt challenges
    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
        try_files $uri =404;
    }
    
    # Redirect all other HTTP traffic to HTTPS
    location / {
        return 301 https://$host$request_uri;
    }
}

# HTTPS server configuration
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name yourapp.com www.yourapp.com;
    
    # SSL certificate configuration
    ssl_certificate /etc/nginx/ssl/cert.pem;
    ssl_certificate_key /etc/nginx/ssl/key.pem;
    ssl_trusted_certificate /etc/nginx/ssl/chain.pem;
    
    # OCSP stapling
    ssl_stapling on;
    ssl_stapling_verify on;
    resolver 8.8.8.8 8.8.4.4 valid=300s;
    resolver_timeout 5s;
    
    # Root directory for static files
    root /var/www/static;
    index index.html;
    
    # Maintenance mode check
    if ($maintenance) {
        return 503;
    }
    
    # Error pages
    error_page 503 @maintenance;
    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;
    
    # Maintenance page
    location @maintenance {
        root /var/www/maintenance;
        try_files /maintenance.html =503;
    }
    
    # Security.txt
    location /.well-known/security.txt {
        return 301 https://yourapp.com/security.txt;
    }
    
    location /security.txt {
        add_header Content-Type text/plain;
        return 200 "Contact: security@yourapp.com\nExpires: 2025-12-31T23:59:59.000Z\nCanonical: https://yourapp.com/security.txt\n";
    }
    
    # Robots.txt
    location /robots.txt {
        add_header Content-Type text/plain;
        return 200 "User-agent: *\nDisallow: /admin/\nDisallow: /api/\nSitemap: https://yourapp.com/sitemap.xml\n";
    }
    
    # Static assets with long-term caching
    location /_next/static/ {
        alias /var/www/static/_next/static/;
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header X-Content-Type-Options nosniff;
        
        # Brotli compression for static assets
        location ~* \.(js|css)$ {
            add_header Vary "Accept-Encoding";
            try_files $uri$arg_br $uri =404;
        }
    }
    
    # Public static files
    location /static/ {
        alias /var/www/static/;
        expires 7d;
        add_header Cache-Control "public";
        add_header X-Content-Type-Options nosniff;
    }
    
    # Favicon and common static files
    location ~* \.(ico|png|jpg|jpeg|gif|svg|webp|woff|woff2|ttf|eot)$ {
        expires 30d;
        add_header Cache-Control "public";
        add_header X-Content-Type-Options nosniff;
        try_files $uri @app;
    }
    
    # Stripe webhook endpoint (special handling)
    location /api/webhooks/stripe {
        limit_req zone=webhooks burst=100 nodelay;
        
        # Stripe-specific headers
        proxy_set_header Stripe-Signature $http_stripe_signature;
        
        proxy_pass http://app;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Port $server_port;
        proxy_cache_bypass $http_upgrade;
        
        # Increased timeouts for webhook processing
        proxy_connect_timeout 10s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
    }
    
    # Authentication routes with strict rate limiting
    location ~ ^/api/auth/(signin|signup|reset|verify) {
        limit_req zone=auth burst=5 nodelay;
        
        proxy_pass http://app;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Port $server_port;
        proxy_cache_bypass $http_upgrade;
        
        # Add rate limiting headers
        add_header X-RateLimit-Zone "auth" always;
        add_header X-RateLimit-Limit "5/min" always;
    }
    
    # API routes with moderate rate limiting
    location /api/ {
        limit_req zone=api burst=50 nodelay;
        
        proxy_pass http://app;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Port $server_port;
        proxy_cache_bypass $http_upgrade;
        
        # API-specific headers
        add_header X-RateLimit-Zone "api" always;
        add_header X-RateLimit-Limit "30/min" always;
    }
    
    # Admin routes (additional security)
    location /admin {
        # Restrict to specific IPs if needed
        # allow 192.168.1.0/24;
        # deny all;
        
        limit_req zone=general burst=10 nodelay;
        
        proxy_pass http://app;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Port $server_port;
        proxy_cache_bypass $http_upgrade;
    }
    
    # Health check endpoint (no rate limiting)
    location /api/health {
        access_log off;
        proxy_pass http://app;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Quick timeouts for health checks
        proxy_connect_timeout 5s;
        proxy_send_timeout 5s;
        proxy_read_timeout 5s;
    }
    
    # Main application routes
    location / {
        limit_req zone=general burst=20 nodelay;
        
        proxy_pass http://app;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Port $server_port;
        proxy_cache_bypass $http_upgrade;
        
        # Enable caching for static content
        location ~* \.(css|js|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            expires 30d;
            add_header Cache-Control "public";
            proxy_pass http://app;
        }
    }
    
    # Fallback for app routing
    location @app {
        proxy_pass http://app;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Port $server_port;
        proxy_cache_bypass $http_upgrade;
    }
}

# Staging server configuration (if needed)
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name staging.yourapp.com;
    
    ssl_certificate /etc/nginx/ssl/staging-cert.pem;
    ssl_certificate_key /etc/nginx/ssl/staging-key.pem;
    
    # Basic auth for staging
    auth_basic "Staging Environment";
    auth_basic_user_file /etc/nginx/.htpasswd;
    
    location / {
        proxy_pass http://app;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
    }
}