generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String           @id @default(cuid())
  email            String           @unique
  emailVerified    Boolean          @default(false)
  emailVerifiedAt  DateTime?
  hashedPassword   String?
  firstName        String?
  lastName         String?
  phone            String?
  dateOfBirth      DateTime?
  profileImageUrl  String?
  stripeCustomerId String?          @unique
  status           UserStatus       @default(PENDING_VERIFICATION)
  role             UserRole         @default(CUSTOMER)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  lastLoginAt      DateTime?
  address          Address?
  auditLogs        AuditLog[]
  downloads        Download[]
  invoices         Invoice[]
  notifications    Notification[]
  orders           Order[]
  payments         Payment[]
  reviews          Review[]
  sessions         Session[]
  subscriptions    Subscription[]
  supportMessages  SupportMessage[]
  supportTickets   SupportTicket[]

  @@index([email])
  @@index([stripeCustomerId])
  @@index([status])
  @@index([role])
  @@index([createdAt])
  @@map("users")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
  @@index([expiresAt])
  @@map("sessions")
}

model Address {
  id             String           @id @default(cuid())
  userId         String           @unique
  firstName      String
  lastName       String
  company        String?
  addressLine1   String
  addressLine2   String?
  city           String
  province       CanadianProvince
  postalCode     String
  country        String           @default("CA")
  phone          String?
  isDefault      Boolean          @default(true)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  billingOrders  Order[]          @relation("BillingAddress")
  shippingOrders Order[]          @relation("ShippingAddress")

  @@index([userId])
  @@index([province])
  @@index([postalCode])
  @@map("addresses")
}

model Category {
  id          String     @id @default(cuid())
  name        String     @unique
  slug        String     @unique
  description String?
  imageUrl    String?
  parentId    String?
  sortOrder   Int        @default(0)
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  parent      Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")
  products    Product[]

  @@index([slug])
  @@index([parentId])
  @@index([isActive])
  @@map("categories")
}

model Product {
  id                String             @id @default(cuid())
  name              String
  slug              String             @unique
  description       String?
  shortDescription  String?
  type              ProductType        @default(DIGITAL)
  status            ProductStatus      @default(DRAFT)
  price             Int
  compareAtPrice    Int?
  costPerItem       Int?
  stripeProductId   String?            @unique
  stripePriceId     String?            @unique
  downloadUrl       String?
  downloadLimit     Int?
  downloadExpiry    Int?
  fileSize          Int?
  fileMimeType      String?
  sku               String?            @unique
  barcode           String?
  weight            Float?
  requiresShipping  Boolean            @default(false)
  trackInventory    Boolean            @default(false)
  inventoryQuantity Int?
  allowBackorder    Boolean            @default(false)
  metaTitle         String?
  metaDescription   String?
  metaKeywords      String?
  featured          Boolean            @default(false)
  categoryId        String?
  tags              String?
  sortOrder         Int                @default(0)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  publishedAt       DateTime?
  bundles           BundleItem[]       @relation("BundleToProduct")
  bundleItems       BundleItem[]
  downloads         Download[]
  orderItems        OrderItem[]
  images            ProductImage[]
  variants          ProductVariant[]
  category          Category?          @relation(fields: [categoryId], references: [id])
  reviews           Review[]
  subscriptionPlans SubscriptionPlan[]

  @@index([slug])
  @@index([type])
  @@index([status])
  @@index([categoryId])
  @@index([featured])
  @@index([createdAt])
  @@index([price])
  @@map("products")
}

model ProductVariant {
  id                String      @id @default(cuid())
  productId         String
  name              String
  sku               String?     @unique
  price             Int?
  compareAtPrice    Int?
  costPerItem       Int?
  stripePriceId     String?     @unique
  option1           String?
  option2           String?
  option3           String?
  inventoryQuantity Int?
  weight            Float?
  isActive          Boolean     @default(true)
  sortOrder         Int         @default(0)
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  orderItems        OrderItem[]
  product           Product     @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@index([sku])
  @@index([stripePriceId])
  @@map("product_variants")
}

model ProductImage {
  id        String   @id @default(cuid())
  productId String
  url       String
  altText   String?
  sortOrder Int      @default(0)
  isPrimary Boolean  @default(false)
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@index([isPrimary])
  @@map("product_images")
}

model BundleItem {
  id        String  @id @default(cuid())
  bundleId  String
  productId String
  quantity  Int     @default(1)
  discount  Int?
  sortOrder Int     @default(0)
  bundle    Product @relation("BundleToProduct", fields: [bundleId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([bundleId, productId])
  @@index([bundleId])
  @@index([productId])
  @@map("bundle_items")
}

model SubscriptionPlan {
  id              String         @id @default(cuid())
  productId       String
  name            String
  description     String?
  price           Int
  billingInterval String
  trialDays       Int?           @default(0)
  stripePriceId   String         @unique
  features        Json?
  maxUsers        Int?
  maxDownloads    Int?
  isActive        Boolean        @default(true)
  sortOrder       Int            @default(0)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  product         Product        @relation(fields: [productId], references: [id], onDelete: Cascade)
  subscriptions   Subscription[]

  @@index([productId])
  @@index([stripePriceId])
  @@index([isActive])
  @@map("subscription_plans")
}

model Subscription {
  id                   String             @id @default(cuid())
  userId               String
  planId               String
  stripeSubscriptionId String             @unique
  stripeCustomerId     String
  status               SubscriptionStatus @default(INCOMPLETE)
  currentPeriodStart   DateTime
  currentPeriodEnd     DateTime
  cancelAtPeriodEnd    Boolean            @default(false)
  canceledAt           DateTime?
  endedAt              DateTime?
  trialStart           DateTime?
  trialEnd             DateTime?
  price                Int
  quantity             Int                @default(1)
  metadata             Json?
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  invoices             Invoice[]
  plan                 SubscriptionPlan   @relation(fields: [planId], references: [id])
  user                 User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([planId])
  @@index([stripeSubscriptionId])
  @@index([status])
  @@index([currentPeriodEnd])
  @@map("subscriptions")
}

model Order {
  id                    String      @id @default(cuid())
  userId                String?
  orderNumber           String      @unique
  stripePaymentIntentId String?     @unique
  stripeSessionId       String?     @unique
  status                OrderStatus @default(PENDING)
  subtotal              Int
  taxAmount             Int         @default(0)
  shippingAmount        Int         @default(0)
  discountAmount        Int         @default(0)
  totalAmount           Int
  currency              String      @default("CAD")
  customerEmail         String
  customerPhone         String?
  billingAddressId      String?
  shippingAddressId     String?
  shippingMethod        String?
  trackingNumber        String?
  shippedAt             DateTime?
  deliveredAt           DateTime?
  promoCodeId           String?
  customerNotes         String?
  adminNotes            String?
  taxBreakdown          Json?
  createdAt             DateTime    @default(now())
  updatedAt             DateTime    @updatedAt
  completedAt           DateTime?
  items                 OrderItem[]
  billingAddress        Address?    @relation("BillingAddress", fields: [billingAddressId], references: [id])
  promoCode             PromoCode?  @relation(fields: [promoCodeId], references: [id])
  shippingAddress       Address?    @relation("ShippingAddress", fields: [shippingAddressId], references: [id])
  user                  User?       @relation(fields: [userId], references: [id])
  payments              Payment[]
  refunds               Refund[]

  @@index([userId])
  @@index([orderNumber])
  @@index([status])
  @@index([stripePaymentIntentId])
  @@index([createdAt])
  @@index([customerEmail])
  @@map("orders")
}

model OrderItem {
  id             String          @id @default(cuid())
  orderId        String
  productId      String
  variantId      String?
  name           String
  description    String?
  sku            String?
  quantity       Int             @default(1)
  unitPrice      Int
  totalPrice     Int
  downloadLimit  Int?
  downloadExpiry DateTime?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  downloads      Download[]
  order          Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product        Product         @relation(fields: [productId], references: [id])
  variant        ProductVariant? @relation(fields: [variantId], references: [id])

  @@index([orderId])
  @@index([productId])
  @@index([variantId])
  @@map("order_items")
}

model Payment {
  id                    String        @id @default(cuid())
  orderId               String?
  userId                String?
  stripePaymentIntentId String        @unique
  stripePaymentMethodId String?
  stripeChargeId        String?
  status                PaymentStatus @default(PENDING)
  amount                Int
  currency              String        @default("CAD")
  paymentMethod         String?
  stripeFee             Int?
  applicationFee        Int?
  netAmount             Int?
  description           String?
  metadata              Json?
  receiptUrl            String?
  failureCode           String?
  failureMessage        String?
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  processedAt           DateTime?
  order                 Order?        @relation(fields: [orderId], references: [id])
  user                  User?         @relation(fields: [userId], references: [id])
  refunds               Refund[]

  @@index([orderId])
  @@index([userId])
  @@index([stripePaymentIntentId])
  @@index([status])
  @@index([createdAt])
  @@map("payments")
}

model Refund {
  id             String       @id @default(cuid())
  orderId        String
  paymentId      String
  stripeRefundId String       @unique
  status         RefundStatus @default(PENDING)
  amount         Int
  currency       String       @default("CAD")
  reason         String?
  description    String?
  processedBy    String?
  adminNotes     String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  processedAt    DateTime?
  order          Order        @relation(fields: [orderId], references: [id])
  payment        Payment      @relation(fields: [paymentId], references: [id])

  @@index([orderId])
  @@index([paymentId])
  @@index([stripeRefundId])
  @@index([status])
  @@index([createdAt])
  @@map("refunds")
}

model Invoice {
  id               String        @id @default(cuid())
  subscriptionId   String?
  userId           String
  stripeInvoiceId  String        @unique
  invoiceNumber    String        @unique
  status           InvoiceStatus @default(DRAFT)
  subtotal         Int
  taxAmount        Int           @default(0)
  discountAmount   Int           @default(0)
  totalAmount      Int
  amountPaid       Int           @default(0)
  amountDue        Int
  currency         String        @default("CAD")
  invoiceDate      DateTime
  dueDate          DateTime?
  paidAt           DateTime?
  hostedInvoiceUrl String?
  invoicePdf       String?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  subscription     Subscription? @relation(fields: [subscriptionId], references: [id])
  user             User          @relation(fields: [userId], references: [id])

  @@index([subscriptionId])
  @@index([userId])
  @@index([stripeInvoiceId])
  @@index([status])
  @@index([invoiceDate])
  @@index([dueDate])
  @@map("invoices")
}

model PromoCode {
  id                 String        @id @default(cuid())
  code               String        @unique
  name               String
  description        String?
  type               PromoCodeType
  discountPercent    Int?
  discountAmount     Int?
  usageLimit         Int?
  usageCount         Int           @default(0)
  perCustomerLimit   Int?
  minimumAmount      Int?
  applicableProducts String?
  isActive           Boolean       @default(true)
  startsAt           DateTime?
  expiresAt          DateTime?
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  orders             Order[]

  @@index([code])
  @@index([isActive])
  @@index([expiresAt])
  @@map("promo_codes")
}

model TaxRate {
  id            String           @id @default(cuid())
  province      CanadianProvince
  taxType       TaxType
  rate          Float
  name          String
  description   String?
  isActive      Boolean          @default(true)
  effectiveFrom DateTime
  effectiveTo   DateTime?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt

  @@unique([province, taxType, effectiveFrom])
  @@index([province])
  @@index([isActive])
  @@index([effectiveFrom])
  @@map("tax_rates")
}

model Download {
  id             String     @id @default(cuid())
  userId         String
  productId      String
  orderItemId    String?
  fileName       String
  originalUrl    String
  secureUrl      String
  fileSize       Int
  mimeType       String
  downloadCount  Int        @default(0)
  downloadLimit  Int?
  expiresAt      DateTime?
  isActive       Boolean    @default(true)
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  lastDownloadAt DateTime?
  orderItem      OrderItem? @relation(fields: [orderItemId], references: [id])
  product        Product    @relation(fields: [productId], references: [id])
  user           User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([productId])
  @@index([orderItemId])
  @@index([expiresAt])
  @@index([isActive])
  @@map("downloads")
}

model Review {
  id          String    @id @default(cuid())
  userId      String
  productId   String
  orderId     String?
  rating      Int
  title       String?
  content     String?
  isApproved  Boolean   @default(false)
  isVerified  Boolean   @default(false)
  moderatedBy String?
  moderatedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@index([productId])
  @@index([rating])
  @@index([isApproved])
  @@index([createdAt])
  @@map("reviews")
}

model SupportTicket {
  id            String              @id @default(cuid())
  userId        String?
  subject       String
  description   String
  status        SupportTicketStatus @default(OPEN)
  priority      SupportPriority     @default(MEDIUM)
  category      String?
  assignedTo    String?
  customerEmail String?
  customerName  String?
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  resolvedAt    DateTime?
  messages      SupportMessage[]
  user          User?               @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([status])
  @@index([assignedTo])
  @@index([createdAt])
  @@map("support_tickets")
}

model SupportMessage {
  id          String        @id @default(cuid())
  ticketId    String
  userId      String?
  message     String
  isInternal  Boolean       @default(false)
  attachments String?
  createdAt   DateTime      @default(now())
  ticket      SupportTicket @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  user        User?         @relation(fields: [userId], references: [id])

  @@index([ticketId])
  @@index([userId])
  @@index([createdAt])
  @@map("support_messages")
}

model Notification {
  id           String             @id @default(cuid())
  userId       String
  type         NotificationType
  title        String
  message      String
  status       NotificationStatus @default(PENDING)
  email        Boolean            @default(false)
  sms          Boolean            @default(false)
  inApp        Boolean            @default(true)
  emailSubject String?
  emailHtml    String?
  data         Json?
  createdAt    DateTime           @default(now())
  sentAt       DateTime?
  readAt       DateTime?
  user         User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@index([type])
  @@index([createdAt])
  @@map("notifications")
}

model AuditLog {
  id          String      @id @default(cuid())
  userId      String?
  action      AuditAction
  resource    String
  resourceId  String?
  oldValues   Json?
  newValues   Json?
  ipAddress   String?
  userAgent   String?
  endpoint    String?
  method      String?
  metadata    Json?
  description String?
  createdAt   DateTime    @default(now())
  user        User?       @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([action])
  @@index([resource])
  @@index([createdAt])
  @@index([ipAddress])
  @@map("audit_logs")
}

model AnalyticsEvent {
  id            String   @id @default(cuid())
  userId        String?
  sessionId     String?
  eventType     String
  eventCategory String?
  eventAction   String?
  eventLabel    String?
  eventValue    Int?
  page          String?
  productId     String?
  ipAddress     String?
  userAgent     String?
  referrer      String?
  metadata      Json?
  createdAt     DateTime @default(now())

  @@index([userId])
  @@index([sessionId])
  @@index([eventType])
  @@index([productId])
  @@index([createdAt])
  @@map("analytics_events")
}

model SystemSetting {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  description String?
  category    String?
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([category])
  @@index([isPublic])
  @@map("system_settings")
}

enum UserRole {
  ADMIN
  CUSTOMER
  SUPPORT
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING_VERIFICATION
}

enum ProductType {
  DIGITAL
  PHYSICAL
  SUBSCRIPTION
  BUNDLE
}

enum ProductStatus {
  ACTIVE
  INACTIVE
  DRAFT
  ARCHIVED
}

enum OrderStatus {
  PENDING
  PROCESSING
  COMPLETED
  CANCELLED
  REFUNDED
  PARTIALLY_REFUNDED
}

enum PaymentStatus {
  PENDING
  PROCESSING
  SUCCEEDED
  FAILED
  CANCELLED
  REQUIRES_ACTION
  REFUNDED
  PARTIALLY_REFUNDED
}

enum SubscriptionStatus {
  ACTIVE
  PAUSED
  CANCELLED
  PAST_DUE
  UNPAID
  INCOMPLETE
  INCOMPLETE_EXPIRED
  TRIALING
}

enum InvoiceStatus {
  DRAFT
  OPEN
  PAID
  UNCOLLECTIBLE
  VOID
}

enum RefundStatus {
  PENDING
  SUCCEEDED
  FAILED
  CANCELLED
}

enum PromoCodeType {
  PERCENTAGE
  FIXED_AMOUNT
  FREE_SHIPPING
  BUY_X_GET_Y
}

enum TaxType {
  GST
  HST
  PST
  QST
}

enum AuditAction {
  CREATE
  UPDATE
  DELETE
  LOGIN
  LOGOUT
  PAYMENT
  REFUND
  SUBSCRIPTION_CHANGE
}

enum NotificationStatus {
  PENDING
  SENT
  FAILED
  DELIVERED
}

enum CanadianProvince {
  AB
  BC
  MB
  NB
  NL
  NS
  ON
  PE
  QC
  SK
  NT
  NU
  YT
}

enum SupportTicketStatus {
  OPEN
  IN_PROGRESS
  WAITING_FOR_CUSTOMER
  RESOLVED
  CLOSED
}

enum SupportPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum NotificationType {
  ORDER_CONFIRMATION
  PAYMENT_RECEIVED
  PAYMENT_FAILED
  SUBSCRIPTION_CREATED
  SUBSCRIPTION_RENEWED
  SUBSCRIPTION_CANCELLED
  DOWNLOAD_READY
  REFUND_PROCESSED
  SUPPORT_TICKET_UPDATE
  SYSTEM_ALERT
}
